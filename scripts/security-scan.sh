#!/bin/bash

# Script d'audit de s√©curit√© local
# √Ä ex√©cuter avant chaque commit/PR

set -e

echo "üîí Audit de S√©curit√© Frontend"
echo "=============================="
echo ""

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

ERRORS=0

# 1. Audit des d√©pendances
echo "üì¶ 1. Audit des d√©pendances (pnpm audit)..."
if pnpm audit --audit-level=moderate; then
    echo -e "${GREEN}‚úÖ Aucune vuln√©rabilit√© d√©tect√©e${NC}"
else
    echo -e "${RED}‚ùå Vuln√©rabilit√©s trouv√©es dans les d√©pendances${NC}"
    ERRORS=$((ERRORS + 1))
fi
echo ""

# 2. Recherche de secrets
echo "üîë 2. Recherche de secrets/credentials..."
if command -v gitleaks &> /dev/null; then
    if gitleaks detect --no-git; then
        echo -e "${GREEN}‚úÖ Aucun secret d√©tect√©${NC}"
    else
        echo -e "${RED}‚ùå Secrets d√©tect√©s dans le code${NC}"
        ERRORS=$((ERRORS + 1))
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  gitleaks non install√© (skip)${NC}"
fi
echo ""

# 3. Recherche de tokens en localStorage
echo "üîç 3. Recherche de tokens en localStorage..."
if grep -r "localStorage.*auth_bearer" src/ 2>/dev/null; then
    echo -e "${RED}‚ùå auth_bearer trouv√© en localStorage (vuln√©rabilit√© XSS)${NC}"
    ERRORS=$((ERRORS + 1))
else
    echo -e "${GREEN}‚úÖ Aucun token JWT en localStorage${NC}"
fi
echo ""

# 4. Recherche d'appels directs au backend
echo "üåê 4. V√©rification appels API..."
if grep -r "https://api.chanvre-vert.fr" src/ --exclude-dir=app/api 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Appels directs au backend d√©tect√©s (devrait passer par BFF)${NC}"
else
    echo -e "${GREEN}‚úÖ Tous les appels passent par le BFF${NC}"
fi
echo ""

# 5. V√©rification dangerouslySetInnerHTML
echo "‚ö†Ô∏è  5. V√©rification dangerouslySetInnerHTML..."
dangerous_html=$(grep -r "dangerouslySetInnerHTML" src/ --include="*.tsx" --include="*.jsx" 2>/dev/null | wc -l)
if [ "$dangerous_html" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  ${dangerous_html} utilisations de dangerouslySetInnerHTML trouv√©es${NC}"
    echo "   V√©rifier que DOMPurify est utilis√© avant chaque utilisation"
    
    # V√©rifier si DOMPurify est import√© dans les m√™mes fichiers
    if grep -r "import.*DOMPurify" src/components/RichTextRenderer/ 2>/dev/null; then
        echo -e "${GREEN}   ‚úÖ DOMPurify est import√©${NC}"
    else
        echo -e "${RED}   ‚ùå DOMPurify non trouv√©${NC}"
        ERRORS=$((ERRORS + 1))
    fi
else
    echo -e "${GREEN}‚úÖ Aucun dangerouslySetInnerHTML${NC}"
fi
echo ""

# 6. Tests de s√©curit√©
echo "üß™ 6. Ex√©cution des tests de s√©curit√©..."
if pnpm test tests/security --passWithNoTests; then
    echo -e "${GREEN}‚úÖ Tests de s√©curit√© pass√©s${NC}"
else
    echo -e "${RED}‚ùå Tests de s√©curit√© √©chou√©s${NC}"
    ERRORS=$((ERRORS + 1))
fi
echo ""

# 7. ESLint
echo "üîß 7. ESLint (r√®gles de s√©curit√©)..."
if pnpm lint; then
    echo -e "${GREEN}‚úÖ ESLint pass√©${NC}"
else
    echo -e "${RED}‚ùå Erreurs ESLint${NC}"
    ERRORS=$((ERRORS + 1))
fi
echo ""

# 8. TypeScript
echo "üìò 8. V√©rification TypeScript..."
if pnpm tsc --noEmit; then
    echo -e "${GREEN}‚úÖ TypeScript OK${NC}"
else
    echo -e "${RED}‚ùå Erreurs TypeScript${NC}"
    ERRORS=$((ERRORS + 1))
fi
echo ""

# 9. V√©rification configuration s√©curit√©
echo "‚öôÔ∏è  9. V√©rification configuration..."

# Next.config headers
if grep -q "Content-Security-Policy" next.config.js; then
    echo -e "${GREEN}‚úÖ CSP configur√©${NC}"
else
    echo -e "${RED}‚ùå CSP manquant dans next.config.js${NC}"
    ERRORS=$((ERRORS + 1))
fi

# HttpOnly cookies
if grep -q "httpOnly: true" src/app/api/auth/login/route.ts; then
    echo -e "${GREEN}‚úÖ Cookies HttpOnly configur√©s${NC}"
else
    echo -e "${RED}‚ùå Cookies HttpOnly manquants${NC}"
    ERRORS=$((ERRORS + 1))
fi

echo ""

# R√©sum√©
echo "=============================="
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Audit de s√©curit√© r√©ussi!${NC}"
    echo "Aucun probl√®me de s√©curit√© d√©tect√©."
    exit 0
else
    echo -e "${RED}‚ùå Audit de s√©curit√© √©chou√© avec ${ERRORS} erreur(s)${NC}"
    echo "Corrigez les probl√®mes avant de commiter."
    exit 1
fi

